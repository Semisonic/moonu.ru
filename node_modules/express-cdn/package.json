{
  "name": "express-cdn",
  "description": "Node.js module for delivering optimized, minified, mangled, gzipped, and CDN-hosted assets in Express using S3 and CloudFront.",
  "version": "0.0.9",
  "author": {
    "name": "Nick Baugh",
    "email": "niftylettuce@gmail.com"
  },
  "contributors": [
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com"
    },
    {
      "name": "James Wyse",
      "email": "james@jameswyse.net"
    },
    {
      "name": "Jon Keating",
      "email": "jon@licq.org"
    },
    {
      "name": "Andrew de Andrade",
      "email": "andrew@deandrade.com.br"
    },
    {
      "name": "Joshua Gross",
      "email": "josh@spandex.io"
    },
    {
      "name": "Dominik Lessel",
      "email": "info@rocketeleven.com"
    },
    {
      "name": "Elad Ben-Israel",
      "email": "elad.benisrael@gmail.com"
    }
  ],
  "keywords": [
    "express-cdn",
    "cdn",
    "assets",
    "cloudfront",
    "s3",
    "amazon",
    "minify",
    "mangle",
    "obfuscate",
    "optipng",
    "jpegtran",
    "optimize",
    "gzip",
    "zlib",
    "uglify",
    "express"
  ],
  "homepage": "https://github.com/niftylettuce/express-cdn",
  "repository": {
    "type": "git",
    "url": "https://github.com/niftylettuce/express-cdn.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "main": "lib/main.js",
  "devDependencies": {
    "express": "3.0.6",
    "ejs": "0.8.3",
    "jade": "0.28.1",
    "mime": "1.2.9",
    "underscore": "1.4.3",
    "underscore.string": "2.3.1",
    "walk": "2.2.1",
    "knox": "0.4.6",
    "async": "0.1.22",
    "request": "2.12.0",
    "uglify-js": "2.2.3"
  },
  "dependencies": {
    "mime": "1.2.9",
    "underscore": "1.4.3",
    "underscore.string": "2.3.1",
    "walk": "2.2.1",
    "knox": "0.4.6",
    "async": "0.1.22",
    "request": "2.12.0",
    "uglify-js": "2.2.3"
  },
  "readme": "# express-cdn <sup>0.0.9</sup>\n\nNode.js module for delivering optimized, minified, mangled, gzipped, and CDN-hosted assets in Express (currently by Amazon S3 and Amazon CloudFront).\n\n**UPDATE**: [Teelaunch](https://github.com/teelaunch) plans to rewrite this module, subscribe to their [email newsletter](http://goo.gl/j0ypI) for special updates.\n\nFollow <a href=\"http://twitter.com/niftylettuce\" target=\"_blank\">@niftylettuce</a> on Twitter for updates.\n\nLike this module?  Check out <a href=\"https://github.com/niftylettuce/node-email-templates\" target=\"_blank\">node-email-templates</a>!\n\n\n## Index\n\n- [Compatibility](#compatibility)\n- [Changelog](#changelog)\n- [Features](#features)\n- [Add-On Modules](#addon)\n- [Lazy Web Requests](#requests)\n- [How Does It Work?](#how)\n- [Environment Differences](#environment)\n- [CDN Setup Instructions](#cdn-setup)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Optional Features](#optional)\n  - [Using A Custom Logger](#optional-logger)\n- [Contributors](#contributors)\n- [License](#license)\n\n\n## Compatibility\n\nThis module is compatible with Express versions `2.x.x` and `3.x.x`.\n\n\n## Changelog\n\n* `0.0.9`: Allowed explicit setting of S3 endpoint (by @eladb)\n\n* `0.0.8`: Enabled string-only output for CDN assets.\n\n**Example**:\n```jade\n- var href = CDN('/img/full/foo.jpg', { raw : true });\na(class=\"fancybox\", href=\"#{href}\")\n  != CDN('/img/small/foo.jpg', { alt : 'Foo', width : 800, height : 600 })\n```\n\n* `0.0.7`: Removed CSS minification due to over-optimization of the `clean-css` module.\n\n* `0.0.6`: Added temporary support for CSS usage of `background-image`, `background`, and `contents` attributes by absolute image paths.\n\n**Example**:\n```css\n/* Valid - Proper way to write CSS with express-cdn */\n#example-valid {\n  background: url(/something.png);\n}\n\n/* Invalid - Don't do this! */\n#example-invalid {\n  background: url(../something.png);\n}\n```\n\n\n## Features\n\n* Automatic parsing of `background`, `background-image` and `content` for `url({{absoluteUrl}})` in stylesheets and scripts.\n* Built-in optimization of images in production mode using [OptiPNG][1] and [JPEGTran][2].\n* Supports [Sass][3], [LESS][4], and [Stylus][5] using respective stylesheet compilers.\n* JavaScript assets are mangled and minified using [UglifyJS][6].\n* Automatic detection of asset changes and will only upload changed assets to S3 in production mode.\n* Utilizes cachebusting, which is inspired by [express-cachebuster][7] and [h5bp][8].\n* All assets are compressed using [zlib][9] into a gzip buffer for S3 uploading with `Content-Encoding` header set to `gzip`.\n* Embed multiple assets as a single `<script>` or `<link>` tag using the built-in dynamic view helper.\n* Loads and processes assets per view (allowing you to minimize client HTTP requests).\n* Combine commonly used assets together using a simple array argument.\n* Uploads changed assets automatically and asynchronously to Amazon S3 (only in production mode) using [knox][10].\n\n\n## Add-on Modules (coming soon)\n\n* [express-cdn-cloudfront][13] - Amazon S3 and Amazon CloudFront\n* [express-cdn-maxcdn][14] - MaxCDN and Amazon S3\n* [express-cdn-cloudfiles][15] - Rackspace CloudFiles\n* [express-cdn-cloudflare][16] - CloudFlare and Amazon S3\n\n## Lazy Web Requests\n\n* Add options to pick CDN network (e.g. MaxCDN vs. Amazon vs. Rackspace)\n* Add tests for all asset types.\n* Modularization of `/lib/main.js` please!\n* Support Express 3.x.x+ and utilize async with view helper.\n* Convert from `fs.statSync` to `fs.stat` with callback for image assets modified timestamp hack.\n* Investigate why Chrome Tools Audit returns leverage proxy cookieless jargon.\n\n\n## How does it work?\n\nWhen the server is first started, the module returns a view helper depending on\nthe server environment (production or development).  It also recursively\nsearches through your `viewsDir` for any views containing instances of the\n`CDN(...)` view helper.  After parsing each instance and removing duplicates,\nit will use your S3 credentials to upload a new copy of the production-quality\nassets.  Enjoy **:)**.\n\n\n## Environment Differences\n\n**Development Mode:**\n\nAssets are untouched, cachebusted, and delivered as typical local files for rapid development.\n\n**Production Mode:**\n\nAssets are optimized, minified, mangled, gzipped, delivered by Amazon CloudFront CDN, and hosted from Amazon S3.\n\n\n## CDN Setup Instructions\n\n1. Visit <https://console.aws.amazon.com/s3/home> and click **Create Bucket**.\n  * Bucket Name: `bucket-name`\n  * Region: `US Standard` (use `options.endpoint`\n    with `'bucket.s3-xxx.amazonaws.com'` for non `US Standard` regions)\n2. Upload <a href=\"https://raw.github.com/niftylettuce/express-cdn/master/index.html\">index.html</a> to your new bucket (this will serve as a placeholder in case someone accesses <http://cdn.your-site.com/>).\n3. From your S3 console **Permissions &rarr; Edit bucket policy**.\n\n   ```\n   {\n      \"Statement\": [{\n         \"Sid\":\"Gives read access to all files\",\n         \"Effect\": \"Allow\",\n         \"Action\": \"s3:GetObject\",\n         \"Principal\":  { \"AWS\": \"*\" },\n         \"Resource\": \"arn:aws:s3:::bucketname/*\"\n      }]\n   }\n   ```\n\n4. Visit <https://console.aws.amazon.com/cloudfront/home> and click **Create Distribution**.\n  * Choose an origin:\n      - Origin Domain Name: `bucket-name.s3.amazonaws.com`\n      - Origin ID: `S3-bucket-name`\n  * Create default behavior:\n      - Path Pattern: `Default (*)`\n      - Origin: `S3-bucket-name`\n      - Viewer Protocol Policy: `HTTP and HTTPS`\n      - Object Caching: `Use Origin Cache Headers`\n      - Forward Query String: `No (Improves Caching)`\n  * Distribution details:\n      - Alternate Domain Names (CNAMEs): `cdn.your-domain.com`\n      - Default Root Object: `index.html`\n      - Logging: `Off`\n      - Comments: `Created with express-cdn by @niftylettuce.`\n      - Distribution State: `Enabled`\n5. Copy the generated Domain Name (e.g. `xyz.cloudfront.net`) to your clipboard.\n6. Log in to your-domain.com's DNS manager, add a new CNAME \"hostname\" of `cdn`, and paste the contents of your clipboard as the the \"alias\" or \"points to\" value.\n7. After the DNS change propagates, you can test your new CDN by visiting <http://cdn.your-domain.com> (the `index.html` file should get displayed).\n\n\n## Installation\n\n### Install Dependencies\n\n##### Linux\n```bash\n# install optipng and jpegtran packages\nsudo apt-get install optipng libjpeg-progs\n```\n\n##### OS X (with [Homebrew][11])\n```bash\n# install optipng and jpegtran packages\nbrew install optipng libjpeg\n```\n\n### Install express-cdn module\n```bash\nnpm install express-cdn\n```\n\n## Usage\n\n### Server\n\n```js\n// # express-cdn\n\nvar express = require('express')\n  , path    = require('path')\n  , app     = express.createServer()\n  , semver  = require('semver');\n\n// Set the CDN options\nvar options = {\n    publicDir  : path.join(__dirname, 'public')\n  , viewsDir   : path.join(__dirname, 'views')\n  , domain     : 'cdn.your-domain.com'\n  , bucket     : 'bucket-name'\n  , endpoint   : 'bucket-name.s3-eu-west-1.amazonaws.com' // optional\n  , key        : 'amazon-s3-key'\n  , secret     : 'amazon-s3-secret'\n  , hostname   : 'localhost'\n  , port       : 1337\n  , ssl        : false\n  , production : true // optional\n};\n\n// Initialize the CDN magic\nvar CDN = require('express-cdn')(app, options);\n\napp.configure(function() {\n  app.set('view engine', 'jade');\n  app.set('view options', { layout: false, pretty: true });\n  app.enable('view cache');\n  app.use(express.bodyParser());\n  app.use(express.static(path.join(__dirname, 'public')));\n});\n\n// Add the view helper\nif (semver.lt(express.version, '3.0.0')) {\n  app.locals({ CDN: CDN() });\n} else {\n  app.dynamicHelpers({ CDN: CDN });\n}\n\napp.get('/', function(req, res, next) {\n  res.render('basic');\n  return;\n});\n\nconsole.log(\"Server started: http://localhost:1337\");\napp.listen(1337);\n```\n\n### View Engine\n\n#### Jade\n\n```jade\n// #1 - Load an image\n!= CDN('/img/sprite.png')\n\n// #2 - Load an image with a custom tag attribute\n!= CDN('/img/sprite.png', { alt: 'Sprite' })\n\n// #3 - Load a script\n!= CDN('/js/script.js')\n\n// #4 - Load a script with a custom tag attribute\n!= CDN('/js/script.js', { 'data-message': 'Hello' })\n\n// #5 - Load and concat two scripts\n!= CDN([ '/js/plugins.js', '/js/script.js' ])\n\n// #6 - Load and concat two scripts with custom tag attributes\n!= CDN([ '/js/plugins.js', '/js/script.js' ], { 'data-message': 'Hello' })\n\n// #7 - Load a stylesheet\n!= CDN('/css/style.css')\n\n// #8 - Load and concat two stylesheets\n!= CDN([ '/css/style.css', '/css/extra.css' ])\n```\n\n#### EJS\n\n```ejs\n<!-- #1 - Load an image -->\n<%- CDN('/img/sprite.png') %>\n\n<!-- #2 - Load an image with a custom tag attribute -->\n<%- CDN('/img/sprite.png', { alt: 'Sprite' }) %>\n\n<!-- #3 - Load a script -->\n<%- CDN('/js/script.js') %>\n\n<!-- #4 - Load a script with a custom tag attribute -->\n<%- CDN('/js/script.js', { 'data-message': 'Hello' }) %>\n\n<!-- #5 - Load and concat two scripts -->\n<%- CDN([ '/js/plugins.js', '/js/script.js' ]) %>\n\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\n<%- CDN([ '/js/plugins.js', '/js/script.js' ], { 'data-message': 'Hello' }) %>\n\n<!-- #7 - Load a stylesheet -->\n<%- CDN('/css/style.css') %>\n\n<!-- #8 - Load and concat two stylesheets -->\n<%- CDN([ '/css/style.css', '/css/extra.css' ]) %>\n```\n\n### Automatically Rendered HTML\n\n#### Development Mode\n\n```html\n<!-- #1 - Load an image -->\n<img src=\"/img/sprite.png?v=1341214029\" />\n\n<!-- #2 - Load an image with a custom tag attribute -->\n<img src=\"/img/sprite.png?v=1341214029\" alt=\"Sprite\" />\n\n<!-- #3 - Load a script -->\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\"></script>\n\n<!-- #4 - Load a script with a custom tag attribute -->\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\n\n<!-- #5 - Load and concat two scripts -->\n<script src=\"/js/plugins.js?v=1341214029\" type=\"text/javascript\"></script>\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\"></script>\n\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\n<script src=\"/js/plugins.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\n<script src=\"/js/script.js?v=1341214029\" type=\"text/javascript\" data-message=\"Hello\"></script>\n\n<!-- #7 - Load a stylesheet -->\n<link href=\"/css/style.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\n\n<!-- #8 - Load and concat two stylesheets -->\n<link href=\"/css/style.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\n<link href=\"/css/extra.css?v=1341214029\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n#### Production Mode\n\nThe protocol will automatically change to \"https\" or \"http\" depending on the SSL option.\n\nThe module will automatically upload and detect new/modified assets based off timestamp,\nas it utilizes the timestamp for version control!  There is built-in magic to detect if\nindividual assets were changed when concatenating multiple assets together (it adds the\ntimestamps together and checks if the combined asset timestamp on S3 exists!).\n\n```html\n<!-- #1 - Load an image -->\n<img src=\"https://cdn.your-site.com/img/sprite.1341382571.png\" />\n\n<!-- #2 - Load an image with a custom tag attribute -->\n<img src=\"https://cdn.your-site.com/img/sprite.1341382571.png\" alt=\"Sprite\" />\n\n<!-- #3 - Load a script -->\n<script src=\"https://cdn.your-site.com/js/script.1341382571.js\" type=\"text/javascript\"></script>\n\n<!-- #4 - Load a script with a custom tag attribute -->\n<script src=\"https://cdn.your-site.com/js/script.1341382571.js\" type=\"text/javascript\" data-message=\"Hello\"></script>\n\n<!-- #5 - Load and concat two scripts -->\n<script src=\"https://cdn.your-site.com/plugins%2Bscript.1341382571.js\" type=\"text/javascript\"></script>\n\n<!-- #6 - Load and concat two scripts with custom tag attributes -->\n<script src=\"https://cdn.your-site.com/plugins%2Bscript.1341382571.js\" type=\"text/javascript\" data-message=\"Hello\"></script>\n\n<!-- #7 - Load a stylesheet -->\n<link href=\"https://cdn.your-site.com/css/style.1341382571.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n<!-- #8 - Load and concat two stylesheets -->\n<link href=\"https://cdn.your-site.com/style%2Bextra.1341382571.css\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n\n## Optional Features\n\n### Using a custom logger\n\nBy default log messages will be sent to the console. If you would like to use a custom logger function you may pass it in as `options.logger`\n\nThe example below uses the [Winston][12] logging library.\n\n```javascript\nvar winston = require('winston');\nwinston.add(winston.transports.File, {filename: 'somefile.log'});\n\n// Set the CDN options\nvar options = {\n    publicDir  : path.join(__dirname, 'public')\n  , viewsDir   : path.join(__dirname, 'views')\n  , domain     : 'cdn.your-domain.com'\n  , bucket     : 'bucket-name'\n  , key        : 'amazon-s3-key'\n  , secret     : 'amazon-s3-secret'\n  , hostname   : 'localhost'\n  , port       : 1337\n  , ssl        : false\n  , production : true\n  , logger     : winston.info\n};\n\n// Initialize the CDN magic\nvar CDN = require('express-cdn')(app, options);\n\napp.configure(function() {\n  app.set('view engine', 'jade');\n  app.set('view options', { layout: false, pretty: true });\n  app.enable('view cache');\n  app.use(express.bodyParser());\n  app.use(express.static(path.join(__dirname, 'public')));\n});\n\n// Add the dynamic view helper\napp.dynamicHelpers({ CDN: CDN });\n\n```\nAny output from express-cdn is now passed to `winston.info()` which writes to both `console` and `somefile.log`.\n\n\n## Contributors\n\n* Nick Baugh <niftylettuce@gmail.com>\n* James Wyse <james@jameswyse.net>\n* Jon Keating <jon@licq.org>\n* Andrew de Andrade <andrew@deandrade.com.br>\n* <a href=\"http://www.joshisgross.com\" target=\"_blank\">Joshua Gross</a> <josh@spandex.io>\n* Dominik Lessel <info@rocketeleven.com>\n* Elad Ben-Israel <elad.benisrael@gmail.com>\n\n## License\n\nMIT Licensed\n\n[1]: http://optipng.sourceforge.net/\n[2]: http://jpegclub.org/jpegtran/\n[3]: http://sass-lang.com/\n[4]: http://lesscss.org/\n[5]: http://learnboost.github.com/stylus/\n[6]: https://github.com/mishoo/UglifyJS/\n[7]: https://github.com/niftylettuce/express-cachebuster/\n[8]: http://h5bp.com/\n[9]: http://nodejs.org/api/zlib.html\n[10]: https://github.com/LearnBoost/knox/\n[11]: https://github.com/mxcl/homebrew/\n[12]: https://github.com/flatiron/winston/\n[13]: https://github.com/niftylettuce/express-cdn-cloudfront\n[14]: https://github.com/niftylettuce/express-cdn-maxcdn\n[15]: https://github.com/niftylettuce/express-cdn-cloudfiles\n[16]: https://github.com/niftylettuce/express-cdn-cloudflare\n",
  "readmeFilename": "Readme.md",
  "_id": "express-cdn@0.0.9",
  "dist": {
    "shasum": "e0d4d6e2f3e30c285bd5c9e1e81b73fe65d430a9"
  },
  "_from": "express-cdn@https://github.com/pomeo/express-cdn/tarball/master"
}
