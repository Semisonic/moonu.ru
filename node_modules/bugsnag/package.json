{
  "name": "bugsnag",
  "description": "Bugsnag notifier for node.js scripts",
  "version": "0.1.14",
  "main": "./lib/bugsnag.js",
  "homepage": "http://bugsnag.com",
  "dependencies": {
    "tracejs": ">=0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:bugsnag/bugsnag-node.git"
  },
  "readme": "Bugsnag Notifier for Node.js\n============================\n\nThe Bugsnag Notifier for Node.js gives you instant notification of exceptions from your Node.js applications. By default, the notifier hooks into `uncaughtException` event, which means any uncaught exceptions will trigger a notification to be sent to your Bugsnag project.\n\n[Bugsnag](http://bugsnag.com) captures errors in real-time from your web, mobile and desktop applications, helping you to understand and resolve them as fast as possible. [Create a free account](http://bugsnag.com) to start capturing exceptions from your applications.\n\n\nInstallation & Setup\n--------------------\n\nAdd bugsnag to your package.json dependencies.\n\n```javascript\n\"dependencies\": {\n    \"bugsnag\": \"latest\"\n}\n```\n\nRun npm install to install the latest bugsnag notifier version.\n\n```bash\nnpm install\n```\n\nRequire bugsnag in your node.js script.\n\n```javascript\nbugsnag = require(\"bugsnag\");\n```\n\nRegister the bugsnag notifier.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\");\n```\n\nSee the full documentation for the [register](#register) function for more details.\n\n\nUsing Express or Connect Middleware\n-----------------------------------\n\nIn order to have bugsnag report on any exceptions in your express or connect app, you need to configure bugsnag to handle exceptions from within those libraries. In order to do that, simply pass the bugsnag register call into app.use().\n\n```javascript\napp.use(bugsnag.register(\"your-api-key-goes-here\"))\n```\n\nUsing Coffeescript\n------------------\n\nWhen running coffeecript code using the `coffee` executable, Bugsnag cannot notify about uncaught exceptions that are at the top level of your app. It will only be able to notify about those uncaught exceptions in callbacks. This is due to a [feature](https://github.com/jashkenas/coffee-script/issues/1438) of the `coffee` executable. \n\nIn order to get round this you can compile the coffeescript file into a javascript file by running `coffee -c filename.coffee` and then running `node filename.js` to execute your app. This is automatable if you use a [Cakefile](http://coffeescript.org/documentation/docs/cake.html).\n\n\nSend Non-Fatal Exceptions to Bugsnag\n------------------------------------\n\nIf you would like to send non-fatal exceptions to Bugsnag, you can pass any `Error` object or string to the `notify` method:\n\n```javascript\nbugsnag.notify(new Error(\"Non-fatal\"));\n```\n\nYou can also send additional meta-data with your exception:\n\n```javascript\nbugsnag.notify(new Error(\"Non-fatal\"), {extraData:{username:\"bob-hoskins\"}});\n```\n\n###Manual Error Class\n\nIf you would like to set the class of error that has occurred, you can call the `notifyWithClass` method:\n\n```javascript\nbugsnag.notifyWithClass(\"RuntimeError\", new Error(\"Non-fatal\"));\n```\n\n###Callbacks\n\nBoth manual notification methods also support a callback to confirm that the error has been reported to Bugsnag. \n\n```javascript\nbugsnag.notifyWithClass(\"RuntimeError\", new Error(\"Non-fatal\"), function(err, response){\n    if(err) {\n        //Something went wrong\n    } else {\n        //The notify worked\n    }\n});\n```\n\n\nRegister\n-------------\n\nThe bugsnag.register takes an optional second parameter, containing an object of options. The options can be a combination of any of the following.\n\n###releaseStage\n\nBy default, bugsnag looks at the NODE_ENV environment variable to see what releaseStage the script is running in. If that is not set, bugsnag assumes you are running in production. If you want to override this behavior, set the releaseStage as part of the call to register.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{releaseStage:\"development\"});\n```\n\n###appVersion\n\nThe bugsnag notifier will look for a package.json file in the root of the project and pull the application version from that file. If this behavior is incorrect, you can pass an appVersion into register to set your own custom version.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{appVersion:\"1.0.0\"});\n```\n\n###projectRoot\n\nBugsnag highlights stacktrace lines that are in your project for you, and automatically hides code that is in third party libraries. If bugsnag is not hiding stacktrace lines in third party libraries, it is likely that the projectRoot is being incorrectly calculated. You can set it when calling register to a path relative to the bugsnag.js file or an absolute path.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{projectRoot:\"../../../\"});\n```\n\n###packageJSON\n\nIf the bugsnag notifier is unable to locate your package JSON file, you can pass in either a fully qualified path, or a path relative to the location of the bugsnag.js file to the register method. If your package.json file is in your project root, this is usually unnecessary.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{packageJSON:\"../../../package.json\"});\n```\n\n###autoNotify\n\nBugsnag will automatically register for the uncaughtexception event. If you do not wish for this to happen, you can disable the functionality as part of the register call.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{autoNotify:false});\n```\n\n###notifyReleaseStages\n\nBy default the notifier will only notify bugsnag of production exceptions. If you wish to be notified about development exceptions, then you can set the notifyReleaseStages option.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{notifyReleaseStages:[\"development\", \"production\"]});\n```\n\n###useSSL\n\nBugsnag will automatically notify bugsnag.com of an exception using SSL. If you do not want this encryption, you can disable it here.\n\n```javascript\nbugsnag.register(\"your-api-key-goes-here\",{useSSL:false});\n```\n\n\nNotify\n-------------\n\nBoth `notify` and `notifyWithClass` take an optional final object parameter that provides bugsnag with more information as to what was happening in the node script when the exception occurred.\n\n###context\n\nBugsnag will use any context passed into the notify method when notifying bugsnag of the exception. You can set this option to any string value, and you will be able to see the context aggregated in the web dashboard.\n\n```javascript\nbugsnag.notify(new Error(\"Something went badly wrong\"), {context:\"/users/new\"});\n```\n\n###userId\n\nBugsnag will use any userId passed into the notify method when notifying bugsnag of the exception. You can set this option to any string value and bugsnag will use that to count users affected.\n\n```javascript\nbugsnag.notify(new Error(\"Something went badly wrong\"), {userId: \"bob-hoskins\"});\n```\n\n###req\n\nBugsnag can also pull the context (URL) and userID (remote IP address) from the node.js request object if you pass that in to the notify method.\n\n```javascript\nbugsnag.notify(new Error(\"Something went badly wrong\"), {req: req});\n```\n\nThe notifier will also pull out extra information about the request to help you diagnose the exception if you pass the request to the notify method.\n\n###extraData\n\nBugsnag can also send any extra data you want to be sent along with the exception report to bugsnag. To do this just set the extraData option to an object containing the information you want to send.\n\n```javascript\nbugsnag.notify(new Error(\"Something went badly wrong\"), {extraData: {username:\"bob-hoskins\"}});\n```\n\n\nConfiguration\n-------------\n\n###setContext\n\nBugsnag uses the concept of \"contexts\" to help display and group your exceptions. Contexts represent what was happening in your application at the time an exception occurs. In a network based node app, this would typically be the URL requested. If you provide access to the node.js request object, bugsnag will use the URL for you.\n\nIf you would like to set the bugsnag context manually, you can call  `setContext`:\n\n```javascript\nbugsnag.setContext(\"/images/1.png\");\n```\n\n**Note:** The context here can be overridden when calling bugsnag.notify or bugsnag.notifyWithClass.\n\n###setUserId\n\nBugsnag helps you understand how many of your users are affected by each exception. In order to do this, we send along a userId with every exception. If you provide access to the node.js request object, bugsnag will use the remote IP address to identify the user.\n    \nIf you would like to override this `userId`, for example to set it to be a username of your currently logged in user, you can call `setUserId`:\n\n```javascript\nbugsnag.setUserId(\"leeroy-jenkins\");\n```\n\n**Note:** The userId here can be overridden when calling bugsnag.notify or bugsnag.notifyWithClass.\n\n###setExtraData\n\nIt is often very useful to send some extra application or user specific data along with every exception. To do this, you can call the `setExtraData` method:\n    \n```javascript\nbugsnag.setExtraData({username: \"bob-hoskins\"});\n```\n\n\nReporting Bugs or Feature Requests\n----------------------------------\n\nPlease report any bugs or feature requests on the github issues page for this project here:\n\n<https://github.com/bugsnag/bugsnag-node/issues>\n\n\nContributing\n------------\n\n-   [Fork](https://help.github.com/articles/fork-a-repo) the [notifier on github](https://github.com/bugsnag/bugsnag-node)\n-   Commit and push until you are happy with your contribution\n-   [Make a pull request](https://help.github.com/articles/using-pull-requests)\n-   Thanks!\n\n\nLicense\n-------\n\nThe Bugsnag Node.js notifier is free software released under the MIT License.  See [LICENSE.txt](https://github.com/bugsnag/bugsnag-node/blob/master/LICENSE.txt) for details.",
  "readmeFilename": "README.md",
  "_id": "bugsnag@0.1.14",
  "dist": {
    "shasum": "5ecdb7b027fa786d185f40da6bc1eed851d3172d"
  },
  "_from": "bugsnag@latest"
}
